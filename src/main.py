from telegram import Update, ReplyKeyboardMarkup
from config import Config
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import database as db
from datetime import datetime

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
reply_keyboard = [
    ['–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
    ['–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞', '–Ø –∑–∞–ø–æ–º–Ω–∏–ª']
]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db.register_user(user.id, user.username, user.first_name, user.last_name)
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞.\n\n"
        "–ù–∞–∂–º–∏ '–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ' —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.",
        reply_markup=markup
    )

async def send_daily_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    word_data = db.get_random_word(user_id)
    
    if word_data:
        word_id, word, translation, example = word_data
        context.user_data['last_word_id'] = word_id
        
        await update.message.reply_text(
            f"üìñ –°–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n\n"
            f"<b>{word}</b> - {translation}\n"
            f"<i>–ü—Ä–∏–º–µ—Ä:</i> {example}",
            parse_mode="HTML",
            reply_markup=markup
        )
    else:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è!")

async def handle_word_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id
    
    if text == '–Ø –∑–∞–ø–æ–º–Ω–∏–ª':
        word_id = context.user_data.get('last_word_id')
        if word_id:
            db.mark_word_as_learned(user_id, word_id)
            await update.message.reply_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –Ø –Ω–∞–ø–æ–º–Ω—é –æ–± —ç—Ç–æ–º —Å–ª–æ–≤–µ –ø–æ–∑–∂–µ.")
        else:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.")
    elif text == '–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ':
        await send_daily_word(update, context)
    elif text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        stats = db.get_user_stats(user_id)
        await update.message.reply_text(
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–í—ã—É—á–µ–Ω–æ —Å–ª–æ–≤: {stats['total_words']}\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['correct_answers']}\n"
            f"–¢–æ—á–Ω–æ—Å—Ç—å: {stats['accuracy']}%"
        )
    elif text == '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞':
        words = db.get_words_to_review(user_id)
        if words:
            await update.message.reply_text(
                "üìö –°–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:\n" + 
                "\n".join([f"{w[0]} - {w[1]}" for w in words])
            )
        else:
            await update.message.reply_text("üéâ –ü–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!")

def main():
    application = Application.builder().token(Config.BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_word_response))
    
    application.run_polling()

if __name__ == '__main__':
    main()
